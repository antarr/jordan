name: CI

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

jobs:
  test:
    runs-on: ubuntu-latest
    
    strategy:
      matrix:
        ruby-version: ['3.2']
        node-version: ['20']
    
    env:
      RAILS_ENV: test
      CC_TEST_REPORTER_ID: ${{ secrets.CC_TEST_REPORTER_ID }}
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Ruby
      uses: ruby/setup-ruby@v1
      with:
        ruby-version: ${{ matrix.ruby-version }}
        bundler-cache: true
    
    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ matrix.node-version }}
        cache: 'npm'
    
    - name: Install Node.js dependencies
      run: npm install
    
    - name: Verify Cypress installation
      run: npx cypress verify
    
    - name: Set up test database
      run: |
        bin/rails db:create
        bin/rails db:migrate
      env:
        RAILS_ENV: test
    
    - name: Set up development database for Cypress
      run: |
        RAILS_ENV=development bin/rails db:create
        RAILS_ENV=development bin/rails db:migrate
    
    - name: Precompile assets for test
      run: bin/rails assets:precompile
      env:
        RAILS_ENV: test
    
    - name: Precompile assets for development
      run: RAILS_ENV=development bin/rails assets:precompile
    
    - name: Run security checks
      run: |
        bin/brakeman --quiet --format plain
    
    - name: Run RSpec tests
      run: |
        bundle exec rspec --format progress --format RspecJunitFormatter --out tmp/rspec_results.xml
    
    - name: Start Rails server for Cypress
      run: |
        ENABLE_JS_COVERAGE=true RAILS_ENV=development bin/rails server -d -p 3000 -e development
        sleep 10
    
    - name: Wait for server to be ready
      run: |
        timeout 60 bash -c 'until curl -f http://localhost:3000/up; do echo "Waiting for server..."; sleep 2; done'
        echo "Server is ready!"
    
    - name: Create Cypress directories
      run: |
        mkdir -p cypress/videos
        mkdir -p cypress/screenshots
    
    - name: List Cypress test files
      run: |
        echo "Found Cypress test files:"
        find cypress/e2e -name "*.cy.js" -type f || echo "No test files found"
    
    - name: Run Cypress tests
      run: |
        npx cypress run --record false --spec "cypress/e2e/**/*.cy.js" --reporter junit --reporter-options "mochaFile=tmp/cypress_results.xml"
      env:
        CYPRESS_baseUrl: http://localhost:3000
        ENABLE_JS_COVERAGE: true
        # Disable Cypress cloud recording to avoid authentication issues
        CYPRESS_RECORD_KEY: ""
    
    - name: Upload Cypress screenshots
      uses: actions/upload-artifact@v4
      if: failure()
      with:
        name: cypress-screenshots
        path: cypress/screenshots
        if-no-files-found: ignore
    
    - name: Upload Cypress videos
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: cypress-videos
        path: cypress/videos
        if-no-files-found: ignore
    
    - name: Upload Cypress test results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: cypress-results
        path: tmp/cypress_results.xml
    
    - name: Stop Rails server
      if: always()
      run: |
        pkill -f "rails server" || true
    
    - name: Generate JavaScript coverage report
      run: |
        npx nyc report --reporter=html --reporter=lcov --reporter=json --report-dir=coverage-js
    
    - name: Merge coverage reports
      run: |
        bundle exec rake coverage:merge
    
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v4
      with:
        file: ./coverage/coverage.xml
        flags: unittests
        name: codecov-umbrella
        fail_ci_if_error: false
        token: ${{ secrets.CODECOV_TOKEN }}
    
    - name: Upload RSpec test results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: rspec-results
        path: tmp/rspec_results.xml
    
    - name: Upload coverage reports
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: coverage-report
        path: coverage/
    
    - name: Upload JavaScript coverage reports
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: js-coverage-report
        path: coverage-js/
        if-no-files-found: ignore
    
    - name: Upload merged coverage reports
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: merged-coverage-report
        path: coverage-merged/
        if-no-files-found: ignore

  deploy:
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    needs: test
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Deploy notification
      run: echo "Deploy job would run here for main branch"